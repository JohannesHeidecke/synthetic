---
layout: default
title: Commands
---


h2. Commands

All the commands accepted by @synt@.

h3. compare

Compares two networks.

{% highlight bash %}
$ synt compare -inet <network1> -inet2 <network2>
{% endhighlight %}

Optional parameters: @-undir@, @-bins@

h3. const

Check if generator weight is constant (random network generator)..

{% highlight bash %}
$ synt const -prg <generator>
{% endhighlight %}

Optional parameters: @-undir@, @-sr@, @-nodes@, @-edges@


h3. convert

Converts network to a simple format.

{% highlight bash %}
$ synt convert -inet <in_network> -onet <out_network>
{% endhighlight %}

Optional parameters: @-undir@

h3. detailfit

Computes fitness and detailed metrics for a set of generators.

{% highlight bash %}
$ synt detailfit -inet <network> -dir <dir> -out <csv_file>
{% endhighlight %}

Optional parameters: @-undir@, @-sr@, @-bins@, @-runs@, @-mean@

h3. dists

Computes matrix of behavioral distances between a set of generators.

{% highlight bash %}
$ synt dists -inet <network> -dir <dir> -out <csv_file>
{% endhighlight %}

Optional parameters: @-undir@, @-sr@

h3. evo

Evolve network generator.

{% highlight bash %}
$ synt evo -inet <network> -odir <dir>
{% endhighlight %}

Optional parameters: @-undir@, @-gens@, @-sr@, @-bins@, @-tolerance@

h3. fit

Computes mean fitness for several runs of a generator.

{% highlight bash %}
$ synt fit -inet <network> -prg <generator>
{% endhighlight %}

Optional parameters: @-undir@, @-sr@, @-bins@, @-runs@

h3. gen

Generates network.

{% highlight bash %}
$ synt gen -prg <generator> -onet <network>
{% endhighlight %}

Optional parameters: @-undir@, @-nodes@, @-edges@, @-sr@

h3. netstats

Prints basic information about a network.

{% highlight bash %}
$ synt netstats -inet <network>
{% endhighlight %}

Optional parameters: @-undir@

h3. prune

Simplify generator program.

{% highlight bash %}
$ synt prune -inet <network> -prg <in_generator> -oprg <out_generator>
{% endhighlight %}

Optional parameters: @-undir@, @-sr@

h3. randgen

Create a random generator program.

{% highlight bash %}
$ synt randgen -oprg <out_generator>
{% endhighlight %}

Optional parameters: @-undir@

h3. random

Generate random network with same number of nodes and edges as the reference network.

{% highlight bash %}
$ synt random -inet <network> -odir <dir>
{% endhighlight %}

Optional parameters: @-undir@, @-bins@, @-runs@

h3. run

Run generator and produce detailed output files.

{% highlight bash %}
$ synt run -prg <generator> -inet <network> -odir <dir>
{% endhighlight %}

Optional parameters: @-undir@, @-sr@, @-bins@, @-runs@

h2. Commons parameters

@-undir@ The network is undirected.
@-gens <n>@ Number of stable generations before search stops (default is 1000)
@-sr <n>@ Sample ratio (default is 0.0006)
@-bins <n>@ Distribution bins (default is 100)
@-tolerance <n>@ Accepted fitness loss for shorter program (default is 0.1)
@-runs <n>@ Number of runs per program (default is 30)
@-mean@ Compute mean
@-nodes <n>@ Number of nodes (default is 1000)
@-edges <n>@ Number or edges (default is 10000)